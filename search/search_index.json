{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyBAM - Interface Python para o modelo BAM","text":""},{"location":"#pybam-interface-python-para-o-modelo-bam","title":"pyBAM - Interface Python para o modelo BAM","text":"<p>O pyBAM \u00e9 uma interface projetada para acessar os arquivos espectrais (n\u00e3o p\u00f3s-processados) do modelo BAM na sua coordenada vertical natural (sigma ou h\u00edbrida) diretamente no Python.</p> <p>Por meio desta interface os campos atmosf\u00e9ricos tridimensionais do modelo BAM s\u00e3o acessados no Python via o xarray, o qual possibilita criar arrays multidmensionais com metadados que podem ser utilizados em opera\u00e7\u00f5es matem\u00e1ticas e em diferentes tipos de gr\u00e1ficos em coordenadas georeferenciadas.</p>"},{"location":"inst_pyBAM/","title":"pyBAM","text":""},{"location":"inst_pyBAM/#pybam","title":"pyBAM","text":"<p>A seguir ser\u00e3o apresentados os passos para obten\u00e7\u00e3o, instala\u00e7\u00e3o e uso do pyBAM.</p> <p>No passo anterior foi instalada a depend\u00eancia para o uso da interface Python do modelo BAM, nesse passo ser\u00e3o apresentados os procedimentos de obten\u00e7\u00e3o e instala\u00e7\u00e3o do pyBAM. Embora n\u00e3o seja um requerimento, \u00e9 uma boa pr\u00e1tica trabalhar com ambientes no Python. Para isso, considerando o uso da distribui\u00e7\u00e3o Anaconda, crie um ambiente para a instala\u00e7\u00e3o do pyBAM e das suas depend\u00eancias (numpy, xarray, matplotlib e cartopy). Para criar um ambiente no Anaconda, siga os passos a seguir.</p> <p>Obs.: Para evitar problemas relacionados com a vers\u00e3o dos pacotes a serem instalados, utilize exatamente as vers\u00f5es indicadas do Python.</p> Comando <pre><code>conda create -n pyBAM python=3.7.6\n</code></pre> <p>Ative o ambiente criado e instale as depend\u00eancias do pyBAM:</p> Comando <pre><code>conda activate pyBAM\nconda install numpy\nconda install -c conda-forge xarray dask netCDF4 bottleneck\nconda install matplotlib\nconda install -c conda-forge cartopy\n</code></pre> <p>Para obter e instalar o pyBAM, siga os passos a seguir. Neste passo, voc\u00ea deve estar com o ambiente pyBAM ativado (caso contr\u00e1rio, o pyBAM ser\u00e1 instalado fora do ambiente que cont\u00e9m as depend\u00eancias necess\u00e1rias). Escolha um local adequado (eg., <code>$HOME/Downloads</code>) e baixe o pacote do pyBAM a partir do reposit\u00f3rio:</p>"},{"location":"inst_pyBAM/#obtencao","title":"Obten\u00e7\u00e3o","text":"Comando <pre><code>svn export https://svn.cptec.inpe.br/pybam/trunk/pyBAM\n</code></pre>"},{"location":"inst_pyBAM/#compilacao-e-instalacao","title":"Compila\u00e7\u00e3o e instala\u00e7\u00e3o","text":"Comando <pre><code>cd pyBAM \npython setup.py build \npython setup.py install\n</code></pre>"},{"location":"inst_sigioBAM/","title":"sigioBAM","text":""},{"location":"inst_sigioBAM/#sigiobam","title":"sigioBAM","text":"<p>A seguir ser\u00e3o apresentados os passos para obten\u00e7\u00e3o, instala\u00e7\u00e3o e uso do sigioBAM, um pr\u00e9-requisito para o uso do pyBAM.</p>"},{"location":"inst_sigioBAM/#obtencao-e-instalacao","title":"Obten\u00e7\u00e3o e Instala\u00e7\u00e3o","text":"<p>O pyBAM depende da biblioteca sigioBAM, que deve ser instalada no ambiente para que o Python possa acess\u00e1-la.</p>"},{"location":"inst_sigioBAM/#instacao-da-biblioteca-sigiobam","title":"Insta\u00e7\u00e3o da biblioteca sigioBAM","text":"<p>Para obter e instalar o sigioBAM, siga os passos a seguir:</p>"},{"location":"inst_sigioBAM/#obtencao","title":"Obten\u00e7\u00e3o","text":"Comando <pre><code>svn export https://svn.cptec.inpe.br/slib/tag/libsigiobam-1.1\n</code></pre>"},{"location":"inst_sigioBAM/#compilacao","title":"Compila\u00e7\u00e3o","text":"<p>Aten\u00e7\u00e3o</p> <p>Certifique-se de utilizar a vers\u00e3o 11.4.0 do compilador GNU.</p> Comando <pre><code>cd libsigiobam-1.1\n./autogen.sh \n./configure --prefix=/opt/sigioBAM \nmake \nmake install\n</code></pre> <p>Obs.: Caso n\u00e3o seja root do sistema, instale a biblioteca na pasta pessoal e prossiga para o pr\u00f3ximo passo.</p>"},{"location":"inst_sigioBAM/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>\u00c9 necess\u00e1rio incluir o caminho de instala\u00e7\u00e3o do sigioBAM no path do sistema para que o Python possa acessar a biblioteca. Ent\u00e3o \u00e9 necess\u00e1rio criar uma v\u00e1ri\u00e1vel de ambiente e export\u00e1-la. Se voc\u00ea tiver acesso root, edite o arquivo <code>/etc/bash.bashrc</code>, caso contr\u00e1rio edite o arquivo <code>$HOME/.bashrc</code>.</p> <p>Em qualquer um dos arquivos <code>/etc/bash.bashrc</code> ou <code>$HOME/.bashrc</code>, inclua as seguintes linhas:</p> Comando <pre><code>export SIGIOBAM=/opt/sigioBAM\nexport LD_LIBRARY_PATH=/${SIGIOBAM}/lib:${LD_LIBRARY_PATH}\n</code></pre> <p>Obs.: \u00e9 importante a cria\u00e7\u00e3o da vari\u00e1vel <code>SIGIOBAM</code> pois a biblioteca pyBAM ir\u00e1 procurar por esta vari\u00e1vel durante a instala\u00e7\u00e3o do pacote.</p>"},{"location":"uso/","title":"Uso","text":""},{"location":"uso/#uso","title":"Uso","text":"<p>Nos passos anteriores foi apresentada a forma de obten\u00e7\u00e3o e instala\u00e7\u00e3o das depend\u00eancias e o pacote pyBAM. A seguir ser\u00e1 demostrado o uso b\u00e1sico do pacote.</p> <p>O primeiro passo \u00e9 carregar o pacote no ambiente Python. Uma vez que o ambiente Python j\u00e1 esteja em execu\u00e7\u00e3o basta importar o pacote:</p> Comando <pre><code>import pyBAM as pb\n</code></pre> <p>Para a visualiza\u00e7\u00e3o de figuras \u00e9 necess\u00e1rio carregar o pacote matplotlib:</p> Comando <pre><code>import matplotlib.pyplot as plt\n</code></pre> <p>O pacote pyBAM lida diretamente com os arquivos espectrais gerados pelo modelo BAM. As vari\u00e1veis no espa\u00e7o espectral s\u00e3o recompostas para o espa\u00e7o f\u00edsico (ponto de grade) e s\u00e3o organizadas em estruturas de dados em 2 ou 3 dimens\u00f5es utilizando a biblioteca xarray do Python.</p> <p>Para acessar um arquivo do BAM basta informar o arquivo header correspondente. Por exemplo um arquivo de previs\u00e3o \u00e9 acessado informando o arquivo <code>dir</code>, a previs\u00e3o de 0 horas (condi\u00e7\u00e3o inicial) \u00e9 acessada por meio do arquivo <code>dic</code>, j\u00e1 a condi\u00e7\u00e3o inicial inicializada \u00e9 acessada pelo arquivo <code>din</code>. No caso da condi\u00e7\u00e3o inicial que \u00e9 lida pelo modelo BAM pode ser acessada criando-se um arquivo header, semelhante aos arquivos de previs\u00e3o, por\u00e9m com o nome <code>dun</code>, por exemplo, <code>GANL2021021500.dun.TQ0299L064</code>. Ent\u00e3o para acessar qualquer um destes arquivos \u00e9 realizada a seguinte opera\u00e7\u00e3o no ambiente Python (aqui ser\u00e1 demonstrado com um arquivo de an\u00e1lise <code>icn</code>):</p> Comando <pre><code>bFile = pb.openBAM('GFCTCPT20191115002019111500F.dic.TQ0299L064')\n</code></pre> <p>Para plotar uma vari\u00e1vel em um determinado n\u00edvel \u00e9 realizada a seguinte opera\u00e7\u00e3o:</p> Comando <pre><code>bFile.plotField('VIRTUAL TEMPERATURE', zlevel=1)\n</code></pre> <p>Obs.: se a op\u00e7\u00e3o <code>zlevel</code> for omitida ser\u00e1 plotado o primeiro n\u00edvel da vari\u00e1vel.</p> <p>Como resultado teremos o seguinte mapa:</p> Resultado <p></p> <p>\u00c9 poss\u00edvel obter campos 2D ou 3D para serem manipulados diretamente no Python, por exemplo, um campo 2D \u00e9 obtido da seguinte forma:</p> Comando <pre><code>field = bFile.getField('VIRTUAL TEMPERATURE', zlevel=55)\n</code></pre> <p>Desta forma a vari\u00e1vel <code>field</code> conter\u00e1 um xarray com a temperatura virtual no n\u00edvel 55:</p> ComandoResultado <pre><code>field = bFile.getField('VIRTUAL TEMPERATURE', zlevel=55)\nprint(field)\n</code></pre> <pre><code>&lt;xarray.DataArray 'VIRTUAL TEMPERATURE' (lat: 450, lon: 900)&gt;\narray([[195.43694, 195.43604, 195.43513, ..., 195.43967, 195.43877,\n        195.43785],\n       [195.54573, 195.54234, 195.53894, ..., 195.5558 , 195.55246,\n        195.5491 ],\n       [195.70177, 195.6979 , 195.694  , ..., 195.71307, 195.70935,\n        195.70558],\n       ...,\n       [240.0018 , 239.99652, 239.99113, ..., 240.01709, 240.01208,\n        240.00699],\n       [239.82939, 239.82619, 239.82297, ..., 239.83885, 239.83572,\n        239.83257],\n       [239.6583 , 239.65721, 239.65614, ..., 239.66148, 239.66042,\n        239.65936]], dtype=float32)\nCoordinates:\n  * lat      (lat) float32 89.69 89.3 88.9 88.5 ... -88.5 -88.9 -89.3 -89.69\n  * lon      (lon) float32 0.0 0.4 0.8 1.2 1.6 ... 358.0 358.4 358.8 359.2 359.6\n&gt;&gt;&gt;\n</code></pre> <p>Por outro lado, para obter campos 3D utiliza-se o m\u00e9todo <code>getField3D</code>. Pelo fato dos arquivos estarem no espa\u00e7o espectral \u00e9 necess\u00e1ria a convers\u00e3o para o espa\u00e7o f\u00edsico, e este processo leva um pouco de tempo e depende da m\u00e1quina onde est\u00e1 sendo executado:</p> ComandoResultado <pre><code>field3D = bFile.getField3D('VIRTUAL TEMPERATURE')\nVIRTUAL TEMPERATURE  has  64  zlevels\nThis operation will take a while ...\n100%|===================================================|64/64 [01:48&lt;00:00,  1.69s/it]\nprint(field3D)\n</code></pre> <pre><code>&lt;xarray.DataArray 'VIRTUAL TEMPERATURE' (lev: 64, lat: 450, lon: 900)&gt;\narray([[[252.69609, 252.69844, 252.70079, ..., 252.68913, 252.69144,\n         252.69376],\n        [252.21732, 252.22253, 252.22774, ..., 252.20169, 252.2069 ,\n         252.21211],\n        [251.98215, 251.9921 , 252.00203, ..., 251.95232, 251.96225,\n         251.9722 ],\n        ...,\n        [248.31041, 248.29773, 248.28464, ..., 248.34602, 248.33456,\n         248.3227 ],\n        [247.39056, 247.38445, 247.37819, ..., 247.4079 , 247.40228,\n         247.3965 ],\n        [246.86551, 246.86342, 246.86131, ..., 246.8717 , 246.86966,\n         246.86758]],\n...\n        [272.3629 , 272.36194, 272.36096, ..., 272.36588, 272.3649 ,\n         272.3639 ],\n        [272.41965, 272.41913, 272.4186 , ..., 272.4212 , 272.4207 ,\n         272.42017],\n        [272.4776 , 272.47736, 272.4771 , ..., 272.47833, 272.4781 ,\n         272.47784]],\n\n       [[239.36282, 239.36331, 239.3638 , ..., 239.36139, 239.36186,\n         239.36234],\n        [239.29114, 239.29208, 239.29305, ..., 239.28831, 239.28925,\n         239.29018],\n        [239.23221, 239.23349, 239.23477, ..., 239.22847, 239.2297 ,\n         239.23096],\n        ...,\n        [268.84753, 268.8466 , 268.84564, ..., 268.85037, 268.84943,\n         268.84848],\n        [268.90298, 268.90225, 268.90155, ..., 268.90512, 268.9044 ,\n         268.9037 ],\n        [268.95297, 268.9526 , 268.9522 , ..., 268.95416, 268.95377,\n         268.95337]]], dtype=float32)\nCoordinates:\n  * lat      (lat) float32 89.69 89.3 88.9 88.5 ... -88.5 -88.9 -89.3 -89.69\n  * lon      (lon) float32 0.0 0.4 0.8 1.2 1.6 ... 358.0 358.4 358.8 359.2 359.6\n  * lev      (lev) int64 1 2 3 4 5 6 7 8 9 10 ... 55 56 57 58 59 60 61 62 63 64\n</code></pre> <p>Como as vari\u00e1veis <code>field</code> e <code>field3D</code> s\u00e3o estruturas de dados do tipo xarray, elas carregam com si todas as funcionalidades do pacote XArray. Para plotar qualquer um dos n\u00edveis da vari\u00e1vel <code>field3D</code> basta executar a seguinte instru\u00e7\u00e3o:</p> Comando <pre><code>field3D.isel(lev=2).plot()\n</code></pre> <p>O que resulta na seguinte imagem:</p> Resultado <p></p> <p>\u00c9 poss\u00edvel aplicar outros m\u00e9todos do xarray, como por exemplo calcular a m\u00e9dia zonal da vari\u00e1vel e ent\u00e3o plotar o resultado:</p> Comando <pre><code>zonal_mean = field3D.mean(dim='lon')\nzonal_mean.plot.contourf(levels=13, yincrease=False, cmap='jet', extend='both')\nzonal_mean.plot.contour(levels=13, yincrease=False, colors='k')\nplt.yscale('log')\nplt.gca().yaxis.set_major_formatter(mpl.ticker.ScalarFormatter()\nplt.show()\n</code></pre> <p>O que deve resultar na seguinte imagem:</p> Resultado <p></p>"}]}